general type rules:
	(sort) - "a term has a type, a type has a kind, kinds and types are both in sort => x : * : # : U1 : U2 ^^^"
		0 ]- * : # : U1 : U2 : U3 : ...

	(var) - "Given a context if A is a sort then x:A is well typed"
		T ]- A:s
		T , x:A ]- x:A

	(weak) - "Given a context, adding to it will not remove derivation possible from it"
		T ]- A:B				T ]- C:s
		T , x:C ]- A:B
		if x isn't contained in T

	(conv) - "If given a context with A:B and B':s then you can derive A:B' if B is beta reducible to B'"
		T ]- A:B 				T ]- B':s
		T ]- A:B'
		if B is beta reductible to B'

type rules dependent functions(as a negative type):
s is sort, minuscule are patterns, capitalised are any term
T = context , ]- = derives , > = lambda abstraction , T,+:^ ]- ° = by adding (+) of (^) to the context you can derive (°)
	(form) - "If given a context and adding to it x:A you can derive B:s2, then you can abstract x from B with (A@A(x) B ^):s2"
		T ]- A:s1 				T , x:A ]- B:s2
		T ]- (A@A(x) B[x/x] ^):s2
		if 'x' isn't free in 'B'      (A@A(x) B ^):s2 = (A B ^):s2

	(appl/elim) - "Given a context with M:(A@A(x) B ^) and N:A then (N M) has sort B with every occurrence of x in it replaced with N"
		T , x:A ]- Y:B                  T ]- M:(A@A(x) B ^)	T ]- N:A
		T ]- (N M!):B[N/x]

	(abst/intro) - "If given a context and adding x:A to it you can derive M:B and (A@A(x) B ^) is a sort then (>x:A ; M) has sort (A@A(x) B ^)"
		T , x:A ]- M:B			T ]- (A@A(x) B ^):s
		T ]- (>x:A; M):(A@A(x) B ^)


type rules dependent pair(as a negative type):
	(form) -  "If given a context and adding to it x:A you can derive B:s2, then you can abstract x from B with (A@E(x) B %):s2"
		T ]- A:s1 				T , x:A ]- B:s2
		T ]- (A@E(x) B %):s2
		if 'x' isn't free in 'B'      (A@E(x) B %):s2 = (A B %):s2

	(partition/elim) - "If given a contex in which M:(A@E(x) B %) than the first element has type A, the second has type B with every x replaced with the first elemetn, and M can be evaulated to (A % evaluated type of B) when the first element is known"
		T ]- M:(A@E(x) B %)
		T ]- 0 M!:A  			T ]- 1 M!:B[0 M!/x]

	(intro) - "If given a context and adding x:A to it you can derive M:B and (A@E(x) B %) is a sort then (x::x M /) has type (A@E(x) B %)"
		T , x:A	]- Y:B			T ]- (A@E(x) B %):s
		T ]- (x Y /):(A@E(x) B %)
