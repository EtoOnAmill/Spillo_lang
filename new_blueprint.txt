what does a type represent:
	bynary data
	limits on the binary data
	how the binary data should be interpreted
	size of the binary data

what does a rule represent:
	how a type changes
	what can be done with a type
	a specific beheaviour
	functions
	an interaction between types
	an relationship between types


// composite types
	sum = 			| T | U
		// bites representation: [uint to id the variant][data]
	product = 		(T, U)
// rules
	function = 		\T -> U
	beheaviours =	iterator => & next: \iterator -> iterator & get: \iterator -> option T



combinators =
	(f ° g ° j) 		= f(g(j(_)))
	(f % g % j)			= j(g(f(_)))
	f % g ° j % i 		= i(g(f(j(_))))
	f ° g % j ° i 		= j(f(g(i(_))))

	x |> f |> g 	= g(f(x))
	f $ g $ d x		= f(g(d(x)))





types as values & values as types
rules as proofs 


type divRes = 
	| Ok: int,
	| Err: 
		|: divZero,
		|: invalidArgs;;
